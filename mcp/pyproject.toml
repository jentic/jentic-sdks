[project]
name = "jentic-mcp"
version = "0.6.6"
description = "Jentic MCP Plugin Implementation"
authors = [
    {name = "Jentic Labs", email = "info@jenticlabs.com"},
]
dependencies = [
    "pydantic>=2.0.0",
    "typer>=0.9.0",
    "rich>=13.6.0",
    "httpx>=0.25.0",
    "python-dotenv>=1.0.0",
    "fastapi>=0.103.1",
    "uvicorn>=0.23.2",
    "jentic >=0.7.13",
]
requires-python = ">=3.10"
readme = "README.md"
license = {text = "MIT"}

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.25.3",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.pdm]
[tool.pdm.scripts]
linter = "ruff check . --fix && ruff format ." # Basic ruff commands
lint = "pdm run linter && black . && isort . && mypy src/mcp tests" # Composite lint
test = "pytest"
test-real-integration = "python scripts/run_real_integration_test.py"
# Keep mcp run commands for local pdm testing if desired
mcp-http = "python -m mcp.main serve --transport http"
mcp-stdio = "python -m mcp.main serve --transport stdio"
mcp-mock-http = "python -m mcp.main serve --transport http --mock"
mcp-mock-stdio = "python -m mcp.main serve --transport stdio --mock"
mcp-debug-stdio = "python -m mcp.main serve --transport stdio --mock --debug-stdio --log-level DEBUG"

[project.scripts]
mcp = "mcp.main:app"

[tool.black]
line-length = 100
target-version = ["py310"]

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.10"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[tool.ruff]
line-length = 100
target-version = "py310"
select = ["E", "F", "B", "W", "I", "N", "UP", "YTT", "S"]
ignore = []

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "realtest: marks tests that connect to real external services (deselect with '-m \"not realtest\"')"
]
addopts = "-m 'not realtest'"
